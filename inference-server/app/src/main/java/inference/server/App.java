/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package inference.server;


import io.grpc.Grpc;
import io.grpc.Server;
import io.grpc.ServerBuilder;
import io.grpc.InsecureServerCredentials;
import java.io.IOException;

import com.example.Inference;
import com.example.TestServiceGrpc;
import com.example.Inference.ImageData;
import com.example.Inference.TestResult;


import com.example.InferenceServiceGrpc;
import com.example.Inference.CategoricalResult;

import ai.onnxruntime.OrtException;
import inference.server.ImageClassifier;


public class App {
    public Server serverBuilder() {
        ImageClassifier imageClassifier = imageClassifierBuilder(); 
        Server server = Grpc.newServerBuilderForPort(
            50051, InsecureServerCredentials.create())
            .addService(new InferenceServiceImpl(imageClassifier)) // 주입 
            .build();
        
        return server;
    }

    public static void main(String[] args) {
        Server server = new App().serverBuilder();
        
        try {
            server.start();
            System.out.println("Server started and listening on port 50051");
            server.awaitTermination();
        } catch (Exception e) { 
            e.printStackTrace();
        }
    }

    public static ImageClassifier imageClassifierBuilder() {
        ImageClassifier img_clfr = new ImageClassifier();
        String resources_path = System.getenv("RESOURCES_PATH");

        try {
            img_clfr.initPProcSession(resources_path +  "/simple_image_preprocessor.onnx");
            img_clfr.initModelSession(resources_path + "/mobilenetv2.onnx");
        } catch (Exception e) {
            System.out.println(String.format("ONNX Runtime exception: %s", e));
        }

        return img_clfr;
    }



    static class InferenceServiceImpl extends InferenceServiceGrpc.InferenceServiceImplBase {
        private ImageClassifier imageClassifier;

        public InferenceServiceImpl(ImageClassifier imageClassifier) {
            this.imageClassifier = imageClassifier;
        }

        @Override
        public void inference(ImageData image, 
                io.grpc.stub.StreamObserver<CategoricalResult> responseObserver) {

            try {
                imageClassifier.base64ToImage(image.getImage());
                imageClassifier.bufferToFloatImage();
                imageClassifier.makeInputArgs();
                float[][][][] preprocessed_img = imageClassifier.forward_pass_preprocessing();
                float[][] result = imageClassifier.forward_pass_neuralnet(preprocessed_img);

                CategoricalResult.Builder resultBuilder = CategoricalResult.newBuilder();
                for(float r: result[0]) {
                    resultBuilder.addResult(r);
                }
                CategoricalResult response = resultBuilder.build();

                responseObserver.onNext(response);
                responseObserver.onCompleted();
            } catch (OrtException e) {
                System.out.println(String.format("ONNX Runtime exception in RPC: %s", e));
            } catch (IOException e) {
                System.out.println(String.format("IO Exeption in RPC: %s", e));
            } finally {
                System.out.println("Error occure");
            }
        }
    }



    static class TestServiceImpl extends TestServiceGrpc.TestServiceImplBase {
        @Override
        public void test(ImageData image, io.grpc.stub.StreamObserver<TestResult> responseObserver) {
            String message = String.format("[From gRPC] Image shape: (%d, %d, %d)", image.getWidth(), image.getHeight(),
                    image.getChannel());
            TestResult response = TestResult.newBuilder().setResult(message).build();

            responseObserver.onNext(response);
            responseObserver.onCompleted();
        }
    }
}

